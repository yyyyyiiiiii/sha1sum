module;

#include <filesystem>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <tuple>

export module App;
export import :hash;
import :options;

namespace app {
  namespace fs = std::filesystem;
  template <Standard>
  struct SHA;

  template <>
  struct SHA<k1> {
    using Hash = sha::v1::Hash;
    constexpr static Standard std = k1;
    constexpr static auto function = [](auto&&... args) { return sha::v1::hash(args...); };
  };

  template <>
  struct SHA<k224> {
    using Hash = sha::v224::Hash;
    constexpr static Standard std = k224;
    constexpr static auto function = [](auto&&... args) { return sha::v224::hash(args...); };
  };

  template <>
  struct SHA<k256> {
    using Hash = sha::v256::Hash;
    constexpr static Standard std = k256;
    constexpr static auto function = [](auto&&... args) { return sha::v256::hash(args...); };
  };

  template <>
  struct SHA<k384> {
    using Hash = sha::v384::Hash;
    constexpr static Standard std = k384;
    constexpr static auto function = [](auto&&... args) { return sha::v384::hash(args...); };
  };

  template <>
  struct SHA<k512> {
    using Hash = sha::v512::Hash;
    constexpr static Standard std = k512;
    constexpr static auto function = [](auto&&... args) { return sha::v512::hash(args...); };
  };

  template <>
  struct SHA<k512_224> {
    using Hash = sha::v512_224::Hash;
    constexpr static Standard std = k512_224;
    constexpr static auto function = [](auto&&... args) { return sha::v512_224::hash(args...); };
  };

  template <>
  struct SHA<k512_256> {
    using Hash = sha::v512_256::Hash;
    constexpr static Standard std = k512_256;
    constexpr static auto function = [](auto&&... args) { return sha::v512_256::hash(args...); };
  };

  template <Standard std>
  struct Format {
    Format() = default;

    Format(const SHA<std>::Hash& hash,
           const std::string& file,
           bool tag,
           const Mode& mode,
           char ending)
      : hash{hash},
        file{file},
        tag{tag},
        mode{mode},
        ending{ending} {}

    friend std::ostream& operator<<(std::ostream& output, const Format<std>& format) {
      auto& hash = format.hash;
      auto& file = format.file;
      bool tag = format.tag;
      auto& mode = format.mode;
      char ending = format.ending;
      if (!tag)
        output << hash
               << (mode == kBinary ? " *" : "  ") << file
               << ending;
      else
        output << "SHA" << std
               << " (" << file << ") = "
               << hash
               << ending;
      return output;
    }

    friend std::istream& operator>>(std::istream& input, Format<std>& format) {
      istream::Fail fail{input};

      auto& hash = format.hash;
      auto& file = format.file;
      auto& tag = format.tag;
      auto& mode = format.mode;
      auto& ending = format.ending;

      std::string buffer;

      if (input >> buffer, buffer.empty()) return fail();

      tag = (buffer == "SHA" + to_string(std));
      if (tag) {
        mode = kBinary;
        if (input >> file,
            file.empty()
            || (file.front() != '(' || file.back() != ')')) return fail();

        file.erase(file.begin());
        file.erase(std::prev(file.end()));

        if (input >> buffer,
            buffer.empty() || buffer != "=") return fail();
        if (input >> buffer,
            buffer.size() != SHA<std>::Hash::bits / 4) return fail();

        std::istringstream hash_input{buffer};
        if (hash_input >> hash,
            hash_input.fail()) return fail();

      } else if (buffer.size() == SHA<std>::Hash::bits / 4) {
        std::istringstream hash_input{buffer};
        if (hash_input >> hash,
            hash_input.fail()) return fail();
        if (input >> file,
            file.empty()) return fail();
        mode = (file.front() == '*' && !fs::exists(file)
                ? kBinary
                : kText);
        if (mode == kBinary)
          file.erase(file.begin());
      } else {
        return fail();
      }

      return input;
    }

    SHA<std>::Hash hash;
    std::string file;
    bool tag;
    Mode mode;
    char ending;
  };

  template <Standard std>
  int print(Options& options) {
    const auto& mode = options.mode;
    const bool zero = options.zero;
    const bool tag = options.tag;
    const std::ios_base::openmode openmode = (mode == kBinary || tag
                                              ? std::ios_base::in | std::ios_base::binary
                                              : std::ios_base::in);

    for (auto& filename : options.filenames) {
      const auto& hash = SHA<std>::function(std::ifstream{filename, openmode});
      std::cout << Format<std>{hash, filename, tag, mode, zero ? '\0' : '\n'};
    }

    return 0;
  }

  int print(Options& options) {
    const auto std = options.std;
    switch (std) {
    case k1: return print<k1>(options);
    case k224: return print<k224>(options);
    case k256: return print<k256>(options);
    case k384: return print<k384>(options);
    case k512: return print<k512>(options);
    case k512_224: return print<k512_224>(options);
    case k512_256: return print<k512_256>(options);
    }
    throw std::invalid_argument{"unsupported standard " + std::to_string(std)};
  }

  template <Standard std>
  bool verify(const Format<std>& format) {
    const std::ios_base::openmode openmode = (format.mode == kBinary || format.tag
                                              ? std::ios_base::in | std::ios_base::binary
                                              : std::ios_base::in);
    std::ifstream input{format.file, openmode};
    if (!input) {
      std::cerr << format.file
                << ": FAILED to open or read (SHA"
                << std << ")"
                << std::endl;
      return false;
    }

    const auto& hash = SHA<std>::function(input);
    std::cout << format.file
              << " " << (hash == format.hash ? "OK" : "FAILED")
              << " (SHA" << std << ")" << std::endl;
    return hash == format.hash;
  }

  template <Standard std>
  bool verify(const std::string& line) {
    std::istringstream input{line};
    Format<std> format;
    if (input >> format, input.fail())
      return false;
    verify(format);
    return true;
  }

  int verify(const std::vector<std::string>& files) {
    for (auto&& file : files) {
      std::ifstream input{file};

      while (input) {
        std::string lines;
        while (std::getline(input, lines)) {
          std::istringstream lines_input{lines};
          std::string line;
          while (std::getline(lines_input, line)) {
            bool parsed = verify<k1>(line);
            parsed |= verify<k224>(line);
            parsed |= verify<k256>(line);
            parsed |= verify<k384>(line);
            parsed |= verify<k512>(line);
            parsed |= verify<k512_224>(line);
            parsed |= verify<k512_256>(line);
            if (!parsed)
              std::cerr << "failed to parse: '" << line << "'" << std::endl;
          }
        }
      }

    }

    return 0;
  }

  export int run(int argc, char* argv[]) {
    Options options = parse(argc, argv);

    if (options.ignore)
      return options.success ? 0 : -1;

    const bool check = options.check;
    return !check ? print(options) : verify(options.filenames);
  }
}
