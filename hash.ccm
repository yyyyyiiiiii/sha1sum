module;

#include <algorithm>
#include <iostream>
#include <iomanip>
#include <ranges>
#include <bit>

#include <sstream>

#include <climits>
#include <cstring>
#include <cstdint>

export module App:hash;

namespace app::istream {
  export struct Fail {
    Fail(std::istream& is)
      : is{is}, g{is.tellg()}, flags{is.flags()}, state{is.rdstate()} {}

    std::istream& operator()() {
      is.clear();
      is.seekg(g, is.beg);
      is.flags(flags);
      is.setstate(state | std::ios_base::failbit);
      return is;
    }

    std::ios::iostate state;
    std::ios_base::fmtflags flags;
    std::streampos g;
    std::istream& is;
  };
}

static_assert(CHAR_BIT == 8);
static_assert(std::endian::native == std::endian::little);

namespace app::bits {
  constexpr void reset(void* data, size_t from, size_t to) {
    const int pad[] = {from % CHAR_BIT ? 1 : 0, to % CHAR_BIT ? 1 : 0};

    if (pad[0])
      ((char*)data)[from / CHAR_BIT] &= 0xff >> (CHAR_BIT - from % CHAR_BIT);

    void* dest = ((char*)data) + from / CHAR_BIT + pad[0];
    size_t count = to / CHAR_BIT - (from / CHAR_BIT + pad[0]);

    memset(dest, 0, count);

    if (pad[1])
      ((char*)data)[to / CHAR_BIT] &= 0xff << (to % CHAR_BIT);
  }
}

namespace app::sha {
  std::invalid_argument bad_t(int t) {
    return std::invalid_argument{"t (" + std::to_string(t) + ") out of range [0, 80]"};
  }
}

namespace app::sha::v1 {
  using Digest = uint32_t[5];
  using Schedule = uint32_t[80];
  using Message = uint32_t[16];

  struct Hash : public std::array<uint32_t, 5> {
    Hash() = default;

    Hash(const Digest& digest) {
      std::copy(std::begin(digest), std::end(digest), std::begin(*this));
    }

    friend std::ostream& operator<<(std::ostream&, const Hash&);
    friend std::istream& operator>>(std::istream&, Hash&);
  };

  std::ostream& operator<<(std::ostream& os, const Hash& hash) {
    auto flags = os.flags();
    os << std::hex;
    for (const auto& value : hash)
      os  << std::setw(8)
          << std::setfill('0')
          << value;
    os.flags(flags);
    return os;
  }

  std::istream& operator>>(std::istream& is, Hash& hash) {
    istream::Fail fail{is};
    auto flags = is.flags();
    for (auto& value : hash) {
      std::string str;
      is >> std::setw(8) >> str;

      if (!is)
        return fail();

      std::istringstream istr{str};

      istr >> std::hex >> value;

      if (istr.fail())
        return fail();
    }
    is.flags(flags);
    return is;
  }

  constexpr uint32_t ch(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
  }

  constexpr uint32_t parity(uint32_t x, uint32_t y, uint32_t z) {
    return x ^ y ^ z;
  }

  constexpr uint32_t maj(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  constexpr uint32_t ft(int t, uint32_t x, uint32_t y, uint32_t z) {
    switch (t) {
    case 0 ... 19: return ch(x, y, z);
    case 20 ... 39:
    case 60 ... 79: return parity(x, y, z);
    case 40 ... 59: return maj(x, y, z);
    }
    throw bad_t(t);
  }

  constexpr uint32_t kt(int t) {
    switch (t) {
    case 0 ... 19: return 0x5a827999;
    case 20 ... 39: return 0x6ed9eba1;
    case 40 ... 59: return 0x8f1bbcdc;
    case 60 ... 79: return 0xca62c1d6;
    }
    throw bad_t(t);
  }

  void schedule(Schedule& W, const Message& M) {
    std::transform(M, M + 16, W, [](uint32_t x){ return std::byteswap(x); });
    for (int t = 16; t < 80; t++)
      W[t] = std::rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
  }

  constexpr void update(Digest& digest, Message& M) {
    Schedule W;
    schedule(W, M);

    uint32_t a = digest[0];
    uint32_t b = digest[1];
    uint32_t c = digest[2];
    uint32_t d = digest[3];
    uint32_t e = digest[4];
    for (int t = 0; t < 80; t++) {
      uint32_t T = std::rotl(a, 5) + ft(t, b, c, d) + e + kt(t) + W[t];
      e = d;
      d = c;
      c = std::rotl(b, 30);
      b = a;
      a = T;
    }

    digest[0] += a;
    digest[1] += b;
    digest[2] += c;
    digest[3] += d;
    digest[4] += e;
  }

  constexpr void pad(Message& M, uint64_t bits, uint64_t total) {
    bits::reset(M, bits, 511 - 64);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((uint64_t*)M)[512 / 64 - 1] = std::byteswap(total);
  }

  constexpr void pad(Message& M, Message P, uint64_t bits, uint64_t total) {
    bits::reset(M, bits, 511);
    bits::reset(P, 0, 511 - 64);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((uint64_t*)P)[512 / 64 - 1] = std::byteswap(total);
  }

  export Hash hash(std::istream& istream) {
    Digest digest{0x67452301ull, 0xefcdab89ull, 0x98badcfeull, 0x10325476ull, 0xc3d2e1f0ull};

    Message M;
    Message P; // second message, when padding goes over one
    uint64_t total = 0;

    while (istream) {
      istream.read((char *)M, 512 / CHAR_BIT);
      const uint64_t bits = istream.gcount() * CHAR_BIT;
      total += bits;

      if (bits == 512) {
        update(digest, M);
        continue;
      }

      if (bits <= 447)
        pad(M, bits, total);
      else
        pad(M, P, bits, total);

      update(digest, M);

      if (447 < bits)
        update(digest, P);
    }

    return digest;
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v224 {
  using Digest = uint32_t[8];
  using Message = uint32_t[16];
  using Schedule = uint32_t[64];

  struct Hash : public std::array<uint32_t, 7> {
    Hash() = default;

    Hash(const Digest& digest) {
      std::copy(std::begin(digest), std::prev(std::end(digest)), std::begin(*this));
    }

    friend std::ostream& operator<<(std::ostream&, const Hash&);
    friend std::istream& operator>>(std::istream&, Hash&);
  };

  std::ostream& operator<<(std::ostream& os, const Hash& hash) {
    auto flags = os.flags();
    os << std::hex;
    for (const auto& value : hash)
      os  << std::setw(8)
          << std::setfill('0')
          << value;
    os.flags(flags);
    return os;
  }

  std::istream& operator>>(std::istream& is, Hash& hash) {
    istream::Fail fail{is};
    auto flags = is.flags();
    for (auto& value : hash) {
      std::string str;
      is >> std::setw(8) >> str;

      if (!is)
        return fail();

      std::istringstream istr{str};

      istr >> std::hex >> value;

      if (istr.fail())
        return fail();
    }
    is.flags(flags);
    return is;
  }

  constexpr uint32_t ch(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
  }

  constexpr uint32_t maj(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  constexpr uint32_t S0(uint32_t x) {
    return std::rotr(x, 2) ^ std::rotr(x, 13) ^ std::rotr(x, 22);
  }

  constexpr uint32_t S1(uint32_t x) {
    return std::rotr(x, 6) ^ std::rotr(x, 11) ^ std::rotr(x, 25);
  }

  constexpr uint32_t s0(uint32_t x) {
    return std::rotr(x, 7) ^ std::rotr(x, 18) ^ (x >> 3);
  }

  constexpr uint32_t s1(uint32_t x) {
    return std::rotr(x, 17) ^ std::rotr(x, 19) ^ (x >> 10);
  }

  constexpr uint32_t kt(int t) {
    if (!(0 <= t && t <= 63))
      throw bad_t(t);
    return (uint32_t[]){
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    }[t];
  }

  void schedule(Schedule& W, const Message& M) {
    std::transform(M, M + 16, W, [](uint32_t x){ return std::byteswap(x); });
    for (int t = 16; t < 64; t++)
      W[t] = s1(W[t - 2]) + W[t - 7] + s0(W[t - 15]) + W[t - 16];
  }

  constexpr void update(Digest& digest, Message& M) {
    Schedule W;
    schedule(W, M);

    uint32_t a = digest[0];
    uint32_t b = digest[1];
    uint32_t c = digest[2];
    uint32_t d = digest[3];
    uint32_t e = digest[4];
    uint32_t f = digest[5];
    uint32_t g = digest[6];
    uint32_t h = digest[7];
    for (int t = 0; t < 64; t++) {
      uint32_t T1 = h + S1(e) + ch(e, f, g) + kt(t) + W[t];
      uint32_t T2 = S0(a) + maj(a, b, c);
      h = g;
      g = f;
      f = e;
      e = d + T1;
      d = c;
      c = b;
      b = a;
      a = T1 + T2;
    }

    digest[0] += a;
    digest[1] += b;
    digest[2] += c;
    digest[3] += d;
    digest[4] += e;
    digest[5] += f;
    digest[6] += g;
    digest[7] += h;
  }

  constexpr void pad(Message& M, uint64_t bits, uint64_t total) {
    bits::reset(M, bits, 511 - 64);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((uint64_t*)M)[512 / 64 - 1] = std::byteswap(total);
  }

  constexpr void pad(Message& M, Message P, uint64_t bits, uint64_t total) {
    bits::reset(M, bits, 511);
    bits::reset(P, 0, 511 - 64);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((uint64_t*)P)[512 / 64 - 1] = std::byteswap(total);
  }

  export Hash hash(std::istream& istream) {
    Digest digest{0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4};

    Message M;
    Message P; // second message, when padding goes over one
    uint64_t total = 0;

    while (istream) {
      istream.read((char *)M, 512 / CHAR_BIT);
      const uint64_t bits = istream.gcount() * CHAR_BIT;
      total += bits;

      if (bits == 512) {
        update(digest, M);
        continue;
      }

      if (bits <= 447)
        pad(M, bits, total);
      else
        pad(M, P, bits, total);

      update(digest, M);

      if (447 < bits)
        update(digest, P);
    }

    return digest;
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}
