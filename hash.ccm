module;

#include <type_traits>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <ranges>
#include <span>
#include <bit>

#include <sstream>

#include <climits>
#include <cstring>
#include <cstdint>

export module App:hash;

namespace app::istream {
  export struct Fail {
    Fail(std::istream& is)
      : is{is}, g{is.tellg()}, flags{is.flags()}, state{is.rdstate()} {}

    std::istream& operator()() {
      is.clear();
      is.seekg(g, is.beg);
      is.flags(flags);
      is.setstate(state | std::ios_base::failbit);
      return is;
    }

    std::ios::iostate state;
    std::ios_base::fmtflags flags;
    std::streampos g;
    std::istream& is;
  };
}

static_assert(CHAR_BIT == 8);
static_assert(std::endian::native == std::endian::little);

namespace app::bits {
  constexpr void reset(void* data, size_t from, size_t to) {
    const int pad[] = {from % CHAR_BIT ? 1 : 0, to % CHAR_BIT ? 1 : 0};

    if (pad[0])
      ((char*)data)[from / CHAR_BIT] &= 0xff >> (CHAR_BIT - from % CHAR_BIT);

    void* dest = ((char*)data) + from / CHAR_BIT + pad[0];
    size_t count = to / CHAR_BIT - (from / CHAR_BIT + pad[0]);

    memset(dest, 0, count);

    if (pad[1])
      ((char*)data)[to / CHAR_BIT] &= 0xff << (to % CHAR_BIT);
  }
}

namespace app::sha {
  std::invalid_argument bad_t(int t) {
    return std::invalid_argument{"t (" + std::to_string(t) + ") out of range [0, 80]"};
  }

  export template <class D, size_t N_bits>
  struct Hash : public std::array<std::remove_extent_t<D>,
                                  (N_bits / (sizeof(std::remove_extent_t<D>) * CHAR_BIT)
                                   + (N_bits % (sizeof(std::remove_extent_t<D>) * CHAR_BIT)
                                      ? 1
                                      : 0))> {
    using type = std::remove_extent_t<D>;
    constexpr static size_t type_bits = sizeof(type) * CHAR_BIT;
    constexpr static size_t N = (N_bits / type_bits + (N_bits % type_bits ? 1 : 0));

    Hash() = default;

    Hash(const D& digest) {
      std::copy(digest, digest + N, std::begin(*this));
    }

    friend std::ostream& operator<<(std::ostream& os, const Hash<D, N_bits>& hash) {
      auto flags = os.flags();
      os << std::hex;
      size_t total = 0;
      for (const auto& value : hash) {
        total += type_bits;

        size_t shift, w;
        if (total < N_bits) {
          shift = 0;
          w = sizeof(type) * 2;
        } else {
          shift = total - N_bits;
          w = (type_bits - (total - N_bits)) / 4;
        }

        os  << std::setw(w)
            << std::setfill('0')
            << (value >> shift);
      }
      os.flags(flags);
      return os;
    }

    friend std::istream& operator>>(std::istream& is, Hash<D, N_bits>& hash) {
      istream::Fail fail{is};
      auto flags = is.flags();
      size_t total = 0;
      for (auto& value : hash) {
        total += type_bits;

        size_t shift, w;
        if (total < N_bits) {
          shift = 0;
          w = sizeof(type) * 2;
        } else {
          shift = total - N_bits;
          w = (type_bits - (total - N_bits)) / 4;
        }

        std::string str;
        is >> std::setw(w) >> str;

        if (!is)
          return fail();

        std::istringstream istr{str};

        istr >> std::hex >> value;

        value <<= shift;

        if (istr.fail())
          return fail();
      }
      is.flags(flags);
      return is;
    }
  };

  template <class U>
  constexpr U ch(U x, U y, U z) {
    return (x & y) ^ (~x & z);
  }

  template <class U>
  constexpr U parity(U x, U y, U z) {
    return x ^ y ^ z;
  }

  template <class U>
  constexpr U maj(U x, U y, U z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  template <class M_t, class U>
  constexpr void pad(M_t& M, U bits, U total) {
    constexpr size_t M_bits = sizeof(M_t) * CHAR_BIT;
    constexpr size_t U_bits = sizeof(U) * CHAR_BIT;
    bits::reset(M, bits, M_bits - 1 - U_bits);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((U*)M)[M_bits / U_bits - 1] = std::byteswap(total);
  }

  template <class M_t, class U>
  constexpr void pad(M_t& M, M_t& P, U bits, U total) {
    constexpr size_t M_bits = sizeof(M_t) * CHAR_BIT;
    constexpr size_t U_bits = sizeof(U) * CHAR_BIT;
    bits::reset(M, bits, M_bits - 1);
    bits::reset(P, 0, M_bits - 1 - U_bits);
    ((char*)M)[bits / CHAR_BIT] = 0x80;
    ((U*)P)[M_bits / U_bits - 1] = std::byteswap(total);
  }

  template <class D>
  using digest_fn_t = void(D&);

  template <class D, class M>
  using update_fn_t = void(D&, const M&);

  template <class H, class D, class M_t, class U, digest_fn_t<D> init_digest, update_fn_t<D, M_t> update>
  H hash(std::istream& istream) {
    D digest;
    init_digest(digest);

    M_t M;
    M_t P; // second message, when padding goes over one
    U total = 0;

    constexpr U M_bits = sizeof(M) * CHAR_BIT;
    constexpr U U_bits = sizeof(U) * CHAR_BIT;
    constexpr U threshold = M_bits - U_bits - 1;

    while (istream) {
      istream.read((char *)M, M_bits / CHAR_BIT);
      const U bits = istream.gcount() * CHAR_BIT;
      total += bits;

      if (bits == M_bits) {
        update(digest, M);
        continue;
      }

      if (bits <= threshold)
        pad(M, bits, total);
      else
        pad(M, P, bits, total);

      update(digest, M);

      if (threshold < bits)
        update(digest, P);
    }

    return digest;
  }
}

namespace app::sha::v1 {
  using Digest = uint32_t[5];
  using Schedule = uint32_t[80];
  using Message = uint32_t[16];
  using Hash = sha::Hash<Digest, 160>;

  constexpr uint32_t ft(int t, uint32_t x, uint32_t y, uint32_t z) {
    switch (t) {
    case 0 ... 19: return ch(x, y, z);
    case 20 ... 39:
    case 60 ... 79: return parity(x, y, z);
    case 40 ... 59: return maj(x, y, z);
    }
    throw bad_t(t);
  }

  constexpr uint32_t kt(int t) {
    switch (t) {
    case 0 ... 19: return 0x5a827999;
    case 20 ... 39: return 0x6ed9eba1;
    case 40 ... 59: return 0x8f1bbcdc;
    case 60 ... 79: return 0xca62c1d6;
    }
    throw bad_t(t);
  }

  void schedule(Schedule& W, const Message& M) {
    std::transform(M, M + 16, W, [](uint32_t x){ return std::byteswap(x); });
    for (int t = 16; t < 80; t++)
      W[t] = std::rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
  }

  constexpr void update(Digest& digest, const Message& M) {
    Schedule W;
    schedule(W, M);

    uint32_t a = digest[0];
    uint32_t b = digest[1];
    uint32_t c = digest[2];
    uint32_t d = digest[3];
    uint32_t e = digest[4];
    for (int t = 0; t < 80; t++) {
      uint32_t T = std::rotl(a, 5) + ft(t, b, c, d) + e + kt(t) + W[t];
      e = d;
      d = c;
      c = std::rotl(b, 30);
      b = a;
      a = T;
    }

    digest[0] += a;
    digest[1] += b;
    digest[2] += c;
    digest[3] += d;
    digest[4] += e;
  }

  constexpr void digest(Digest& digest) {
    digest[0] = 0x67452301;
    digest[1] = 0xefcdab89;
    digest[2] = 0x98badcfe;
    digest[3] = 0x10325476;
    digest[4] = 0xc3d2e1f0;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint64_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v224 {
  using Digest = uint32_t[8];
  using Message = uint32_t[16];
  using Schedule = uint32_t[64];
  using Hash = sha::Hash<Digest, 224>;

  namespace functions {
    constexpr uint32_t S0(uint32_t x) {
      return std::rotr(x, 2) ^ std::rotr(x, 13) ^ std::rotr(x, 22);
    }

    constexpr uint32_t S1(uint32_t x) {
      return std::rotr(x, 6) ^ std::rotr(x, 11) ^ std::rotr(x, 25);
    }

    constexpr uint32_t s0(uint32_t x) {
      return std::rotr(x, 7) ^ std::rotr(x, 18) ^ (x >> 3);
    }

    constexpr uint32_t s1(uint32_t x) {
      return std::rotr(x, 17) ^ std::rotr(x, 19) ^ (x >> 10);
    }

    constexpr uint32_t kt(int t) {
      if (!(0 <= t && t <= 63))
        throw bad_t(t);
      return (uint32_t[]){
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
      }[t];
    }

    void schedule(Schedule& W, const Message& M) {
      std::transform(M, M + 16, W, [](uint32_t x){ return std::byteswap(x); });
      for (int t = 16; t < 64; t++)
        W[t] = s1(W[t - 2]) + W[t - 7] + s0(W[t - 15]) + W[t - 16];
    }

    constexpr void update(Digest& digest, const Message& M) {
      Schedule W;
      schedule(W, M);

      uint32_t a = digest[0];
      uint32_t b = digest[1];
      uint32_t c = digest[2];
      uint32_t d = digest[3];
      uint32_t e = digest[4];
      uint32_t f = digest[5];
      uint32_t g = digest[6];
      uint32_t h = digest[7];
      for (int t = 0; t < 64; t++) {
        uint32_t T1 = h + S1(e) + ch(e, f, g) + kt(t) + W[t];
        uint32_t T2 = S0(a) + maj(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + T1;
        d = c;
        c = b;
        b = a;
        a = T1 + T2;
      }

      digest[0] += a;
      digest[1] += b;
      digest[2] += c;
      digest[3] += d;
      digest[4] += e;
      digest[5] += f;
      digest[6] += g;
      digest[7] += h;
    }
  }

  using namespace functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0xc1059ed8;
    digest[1] = 0x367cd507;
    digest[2] = 0x3070dd17;
    digest[3] = 0xf70e5939;
    digest[4] = 0xffc00b31;
    digest[5] = 0x68581511;
    digest[6] = 0x64f98fa7;
    digest[7] = 0xbefa4fa4;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint64_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v256 {
  using Digest = uint32_t[8];
  using Message = uint32_t[16];
  using Schedule = uint32_t[64];
  using Hash = sha::Hash<Digest, 256>;

  using namespace sha::v224::functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0x6a09e667;
    digest[1] = 0xbb67ae85;
    digest[2] = 0x3c6ef372;
    digest[3] = 0xa54ff53a;
    digest[4] = 0x510e527f;
    digest[5] = 0x9b05688c;
    digest[6] = 0x1f83d9ab;
    digest[7] = 0x5be0cd19;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint64_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

using uint128_t = __uint128_t;

namespace app::sha::v384 {
  using Digest = uint64_t[8];
  using Message = uint64_t[16];
  using Schedule = uint64_t[80];
  using Hash = sha::Hash<Digest, 384>;

  namespace functions {
    constexpr uint64_t S0(uint64_t x) {
      return std::rotr(x, 28) ^ std::rotr(x, 34) ^ std::rotr(x, 39);
    }

    constexpr uint64_t S1(uint64_t x) {
      return std::rotr(x, 14) ^ std::rotr(x, 18) ^ std::rotr(x, 41);
    }

    constexpr uint64_t s0(uint64_t x) {
      return std::rotr(x, 1) ^ std::rotr(x, 8) ^ (x >> 7);
    }

    constexpr uint64_t s1(uint64_t x) {
      return std::rotr(x, 19) ^ std::rotr(x, 61) ^ (x >> 6);
    }

    constexpr uint64_t kt(int t) {
      if (!(0 <= t && t <= 79))
        throw bad_t(t);
      return (uint64_t[]){
        0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
        0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
        0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
        0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
        0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
        0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
        0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
        0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
        0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
        0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
        0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
        0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
        0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
        0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,
        0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
        0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
        0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
        0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
        0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,
        0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
      }[t];
    }

    void schedule(Schedule& W, const Message& M) {
      std::transform(M, M + 16, W, [](uint64_t x){ return std::byteswap(x); });
      for (int t = 16; t < 80; t++)
        W[t] = s1(W[t - 2]) + W[t - 7] + s0(W[t - 15]) + W[t - 16];
    }

    constexpr void update(Digest& digest, const Message& M) {
      Schedule W;
      schedule(W, M);

      uint64_t a = digest[0];
      uint64_t b = digest[1];
      uint64_t c = digest[2];
      uint64_t d = digest[3];
      uint64_t e = digest[4];
      uint64_t f = digest[5];
      uint64_t g = digest[6];
      uint64_t h = digest[7];
      for (int t = 0; t < 80; t++) {
        uint64_t T1 = h + S1(e) + ch(e, f, g) + kt(t) + W[t];
        uint64_t T2 = S0(a) + maj(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + T1;
        d = c;
        c = b;
        b = a;
        a = T1 + T2;
      }

      digest[0] += a;
      digest[1] += b;
      digest[2] += c;
      digest[3] += d;
      digest[4] += e;
      digest[5] += f;
      digest[6] += g;
      digest[7] += h;
    }
  }

  using namespace functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0xcbbb9d5dc1059ed8;
    digest[1] = 0x629a292a367cd507;
    digest[2] = 0x9159015a3070dd17;
    digest[3] = 0x152fecd8f70e5939;
    digest[4] = 0x67332667ffc00b31;
    digest[5] = 0x8eb44a8768581511;
    digest[6] = 0xdb0c2e0d64f98fa7;
    digest[7] = 0x47b5481dbefa4fa4;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint128_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v512 {
  using Digest = uint64_t[8];
  using Message = uint64_t[16];
  using Schedule = uint64_t[80];
  using Hash = sha::Hash<Digest, 512>;

  using namespace sha::v384::functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0x6a09e667f3bcc908;
    digest[1] = 0xbb67ae8584caa73b;
    digest[2] = 0x3c6ef372fe94f82b;
    digest[3] = 0xa54ff53a5f1d36f1;
    digest[4] = 0x510e527fade682d1;
    digest[5] = 0x9b05688c2b3e6c1f;
    digest[6] = 0x1f83d9abfb41bd6b;
    digest[7] = 0x5be0cd19137e2179;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint128_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v512_224 {
  using Digest = uint64_t[8];
  using Message = uint64_t[16];
  using Schedule = uint64_t[80];
  using Hash = sha::Hash<Digest, 224>;

  using namespace sha::v384::functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0x8c3d37c819544da2;
    digest[1] = 0x73e1996689dcd4d6;
    digest[2] = 0x1dfab7ae32ff9c82;
    digest[3] = 0x679dd514582f9fcf;
    digest[4] = 0x0f6d2b697bd44da8;
    digest[5] = 0x77e36f7304c48942;
    digest[6] = 0x3f9d85a86a1d36c8;
    digest[7] = 0x1112e6ad91d692a1;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint128_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}

namespace app::sha::v512_256 {
  using Digest = uint64_t[8];
  using Message = uint64_t[16];
  using Schedule = uint64_t[80];
  using Hash = sha::Hash<Digest, 256>;

  using namespace sha::v384::functions;

  constexpr void digest(Digest& digest) {
    digest[0] = 0x22312194fc2bf72c;
    digest[1] = 0x9f555fa3c84c64c2;
    digest[2] = 0x2393b86b6f53b151;
    digest[3] = 0x963877195940eabd;
    digest[4] = 0x96283ee2a88effe3;
    digest[5] = 0xbe5e1e2553863992;
    digest[6] = 0x2b0199fc2c85b8aa;
    digest[7] = 0x0eb72ddc81c52ca2;
  }

  export Hash hash(std::istream& input) {
    return sha::hash<Hash, Digest, Message, uint128_t, digest, update>(input);
  }

  export Hash hash(std::istream&& istream) {
    return hash(istream);
  }
}
