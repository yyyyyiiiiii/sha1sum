module;

#include <iostream>
#include <fstream>

#include <cxxopts.hpp>

export module App:options;
import :project;
import :istream;

namespace app {
  export enum Mode {kBinary, kText};
  export enum Standard {k1, k224, k256, k384, k512, k512_224, k512_256};

  constexpr size_t kStandardsCount = k512_256 + 1;

  export std::string to_string(const Standard& std) {
    const char* array[kStandardsCount];
    array[k1] = "1";
    array[k224] = "224";
    array[k256] = "256";
    array[k384] = "384";
    array[k512] = "512";
    array[k512_224] = "512/224";
    array[k512_256] = "512/256";
    return array[std];
  }

  static std::istream& operator>>(std::istream& input, Mode& mode) {
    istream::Fail fail{input};

    std::string buffer;
    input >> buffer;

    struct {std::string string; Mode value;} modes[] = {
      {"text", kText}, {"binary", kBinary}
    };

    for (auto&& [string, value] : modes) {
      if (string.contains(buffer)) {
        mode = value;
        return input;
      }
    }

    fail();

    return input;
  }

  static std::ostream& operator<<(std::ostream& output, const Mode& mode) {
    output << (mode == kBinary ? "binary" : "text");
    return output;
  }

  std::string sha512xbits(std::istream& input) {
    istream::Reset reset{input};

    std::string buffer;
    input >> buffer;

    if (buffer.empty() || buffer.front() != '/') {
      reset();
      input.clear();
      return "";
    }

    if (buffer == "/") {
      input >> buffer;
      return "/" + buffer;
    }

    std::erase_if(buffer, isspace);
    return buffer;
  }

  export std::istream& operator>>(std::istream& input, Standard& std) {
    std::map<std::string, Standard> map{{"1", k1},
                                        {"224", k224},
                                        {"256", k256},
                                        {"384", k384},
                                        {"512", k512},
                                        {"512/224", k512_224},
                                        {"512/256", k512_256}};
    istream::Fail fail{input};
    std::string key;
    input >> key;

    if (key == "512")
      key += sha512xbits(input);

    if (!map.contains(key))
      return fail();

    std = map[key];

    return input;
  }

  export std::ostream& operator<<(std::ostream& output, const Standard& std) {
    const char* array[kStandardsCount];
    array[k1] = "1";
    array[k224] = "224";
    array[k256] = "256";
    array[k384] = "384";
    array[k512] = "512";
    array[k512_224] = "512/224";
    array[k512_256] = "512/256";

    output << array[std];
    return output;
  }

  export struct Options {
    bool success;
    bool ignore;

    std::vector<std::string> filenames;

    Mode mode;
    Standard std;
    bool check;
    bool tag;
    bool zero;
  };

  export Options parse(int argc, char* argv[]) {
    Options options{.success = false, .ignore = true};

    cxxopts::Options parser(project::kName, project::kDescription);
    parser
      .show_positional_help()
      .set_width(70)
      .add_options()
      ("m,mode", "read in [text, binary] mode",
       cxxopts::value<Mode>()->default_value("text"))
      ("c,check", "read checksums from the FILEs and check them")
      ("tag", "create a BSD-style checksum")
      ("z,zero", "end each output line with NUL, not newline, and disable file name escaping")
      ("s,std", "use SHA-[1, 224, 256, 512, 512/224, 512/256] standard",
       cxxopts::value<Standard>()->default_value("1"))
      ("help", "display this help and exit")
      ("version", "output version information and exit")
      ("files", "files used to evaluate the hashes", cxxopts::value<std::vector<std::string>>());

    parser.parse_positional({"files"});

    cxxopts::ParseResult map;
    try {
      map = parser.parse(argc, argv);
    } catch (std::exception& e) {
      std::cerr << project::kName << ": " << e.what() << std::endl;
      return options;
    }

    if (map.count("help")) {
      std::cout << parser.help();
      options.success = true;
      return options;
    }

    if (map.count("version")) {
      std::cout << project::kName << " " << project::kVersion << std::endl;
      options.success = true;
      return options;
    }

    if (map.count("files"))
      options.filenames = map["files"].as<std::vector<std::string>>();

    for (auto&& filename : options.filenames) {
      if (!std::ifstream{filename}.good()) {
        std::cerr << project::kName << ": bad file '" << filename << "'" << std::endl;
        return options;
      }
    }

    options.mode = map["mode"].as<Mode>();
    options.check = map.count("check");
    options.tag = map.count("tag");
    options.zero = map.count("zero");
    options.std = map["std"].as<Standard>();

    options.ignore = false;

    return options;
  }
}
